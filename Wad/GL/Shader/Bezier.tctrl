#version 150
#extension GL_ARB_tessellation_shader : enable

uniform vec2 VPScale;
layout (vertices = 4) out;

void main () {
   // Pass along the vertex position unmodified
   gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;

   // Define the tessellation levels
   if (gl_InvocationID == 0) { 
      vec2 p1 = gl_in[0].gl_Position.xy;
      vec2 p2 = gl_in[1].gl_Position.xy;
      vec2 p3 = gl_in[2].gl_Position.xy;
      vec2 p4 = gl_in[3].gl_Position.xy;
      vec2 minv = min (min (p1, p2), min (p3, p4));
      vec2 maxv = max (max (p1, p2), max (p3, p4));
      if (minv.x > 1 || minv.y > 1 || maxv.x < -1 || maxv.y < -1) {
         gl_TessLevelOuter[1] = 0;         
      } else {
         vec2 invScale = 1 / VPScale;
         p1 *= invScale; p2 *= invScale;
         p3 *= invScale; p4 *= invScale;
         float len = length (p2 - p1) + length (p4 - p3);
         gl_TessLevelOuter[1] = max (float (ceil (len / 10)), 2);
      }
      gl_TessLevelOuter[0] = 1;
   }
}